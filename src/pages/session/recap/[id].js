import Header from "@/components/Header";
import SessionHistory from "@/components/SessionHistory";
import { getSet } from "@/utils/api";
import { Box, CssBaseline, Typography } from "@mui/material";
import { DataGrid, GridToolbar } from "@mui/x-data-grid";
import { getSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

export default function SessionRecap({ data }) {
  const router = useRouter();
  const { id } = router.query;

  const [isAdmin, setIsAdmin] = useState(false);
  const [set, setSet] = useState();
  useEffect(() => {
    getSet(id.split("-")[0]).then((res) => {
      console.log(res.data);
      if (res.data.sets.user_id == data.user.id) {
        console.log("admin");
        setIsAdmin(true);
      }
      setSet(res.data.sets);
      //setSession(res.data.sets);
      //setQuestion(res.data.questions[res.data.sets.current - 1]);
      //setUsers(res.data.users);
    });

    // startSession(data?.user.id, id).then((res) => {
    //   console.log(res);
    //   setSession(res);
    // });
  }, [id]);
  if (set) {
    return (
      <div>
        <Head>
          <title>Noterly</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <CssBaseline />
        <Box sx={{  width: "100%" }}>
          <Header user={data?.user} />
        </Box>
        <Box sx={{p:2}}>
          {" "}
          <Box>
            <Typography variant="h2">Recap Metrics</Typography>
          </Box>
          <Box sx={{ width: 700 }}>
            <SessionHistory set={set} recap={id.split("-")[1]} />
          </Box>
        </Box>
      </div>
    );
  }
}

export async function getServerSideProps({ req }) {
  const session = await getSession({ req });
  console.log(session);
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: { data: session },
  };
}
